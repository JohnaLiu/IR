Title       : CAREER: A Formally Verified Environment for the Production of Secure Software
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : December 16,  2002  
File        : a0093362

Award Number: 0093362
Award Instr.: Continuing grant                             
Prgm Manager: Sol J. Greenspan                        
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : February 15,  2001  
Expires     : January 31,  2006    (Estimated)
Expected
Total Amt.  : $278009             (Estimated)
Investigator: Adriana B. Compagnoni acompagn@stevens-tech.edu  (Principal Investigator current)
Sponsor     : Stevens Inst of Technology
	      Castle Point on Hudson
	      Hoboken, NJ  07030    201/216-5000

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 
Program Ref : 1045,9216,HPCC,
Abstract    :
              This project studies new architectures for verifiably safe execution of
              software.  The first area of research is the production of a new generation
              of
compilers, called verifying compilers, that can only compile safe code
              according to pre-determined safety policies, such as protection of private
              information and resource-bounded computation. The second area is the production
              of code accompanied by formal proofs guaranteeing that code's compliance
              with
pre-determined safety policies, in the style of Proof-Carrying Code
              (PCC).

   Typed languages guaranteeing different notions of safety criteria,
              including assembly languages and machine code, will be defined, studied, and
              modeled.  These languages will be relevant to both the design of verifying
              compilers and the PCC project.  One approach will be using dependent type
              systems to define powerful intermediate and assembly languages.  Furthermore, a
              prototype verifying compiler will be built by extending an existing compiler
              with a verifying module, using a type-theory based approach to program safety. 
              Representative safety policies will be implemented, and examples developed to
              show that malicious code cannot be certified. The research component will be
              adapted for inclusion in the graduate curriculum.  Furthermore, a student will
              be supervised towards a PhD in state-of-the-art compiler technology.

