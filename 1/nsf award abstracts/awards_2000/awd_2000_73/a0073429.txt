Title       : Modeling Run-Time Reconfiguration
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : April 11,  2002     
File        : a0073429

Award Number: 0073429
Award Instr.: Continuing grant                             
Prgm Manager: Peter J. Varman                         
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : August 15,  2000    
Expires     : July 31,  2003       (Estimated)
Expected
Total Amt.  : $299999             (Estimated)
Investigator: Jerry L. Trahan trahan@ece.lsu.edu  (Principal Investigator current)
              Suresh Rai  (Co-Principal Investigator current)
              Ramachandran Vaidyanathan  (Co-Principal Investigator current)
Sponsor     : La St U & A&M Coll
	      330 Thomas Boyd Hall
	      Baton Rouge, LA  70803    225/578-3386

NSF Program : 4715      COMPUTER SYSTEMS ARCHITECTURE
Fld Applictn: 
Program Ref : 9215,HPCC,
Abstract    :
              Run-time reconfiguration (RTR) is a method of computing in which the hardware,
              usually field-programmable gate arrays (FPGAs), changes structure from one
              phase to the next of a computation.  It has applications in image processing,
              signal processing, encryption, networking, and other areas.  The research
              develops the necessary foundations to open up RTR to wider usage.

The
              research addresses directions: (1) Development of a layered model of FPGAs
              suitable for broad exploration of RTR solution approaches, and porting of
              reconfiguration techniques developed by the investigators and others in the
              study of reconfigurable meshes to the RTR arena. (2) Design of fault tolerant
              RTR solutions in both an algorithm-specific context and in a general
              computational context. (3) Development of ``hardware operating system'' support
              for users to distance themselves from FPGA details.

The research leads to
              benefits of less hardware, because of reuse of reconfigurable hardware, and
              faster computation, because of specialization to input. It develops a
              fundamental understanding of RTR, its power and
limitations, and to establish
              a framework for using it efficiently.


