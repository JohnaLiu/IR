Title       : Collaboration-Oriented Aspects
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : August 24,  2001    
File        : a0098643

Award Number: 0098643
Award Instr.: Standard Grant                               
Prgm Manager: Sol J. Greenspan                        
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : September 1,  2001  
Expires     : August 31,  2003     (Estimated)
Expected
Total Amt.  : $99999              (Estimated)
Investigator: Karl J. Lieberherr lieber@cs.neu.edu  (Principal Investigator current)
              David H. Lorenz  (Co-Principal Investigator current)
Sponsor     : Northeastern University
	      360 Huntington Avenue
	      Boston, MA  021155096    617/373-5600

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 
Program Ref : 9216,HPCC,
Abstract    :
              Abstract:

0098643

Collaboration-Oriented Aspects

PI:    Karl
              Lieberherr
co-PI: David Lorenz

The goal of AOP (Aspect-Oriented
              Programming) is to turn a tangled and scattered implementation of a
              crosscutting concern into an aspect, i.e. a well-modularized 
implementation
              of the concern.  The goal of the proposed research is to design and implement a
              collaboration-based language for aspect-oriented programming that supports
              reusable aspects.  The potential impact of the proposed research is to improve
              the development and maintenance of complex software. 

The design and
              implementation of the new language will be evaluated in two diverse domains:
              telecommunication applications in collaboration with BBN and banking
              applications in collaborations with UBS.  The success of the project will be
              measured based on the ease of evolution of the applications that will be
              built
with our language. It is expected that the tangling control offered by
              AOP
and the loose coupling between class graphs and path sets offered by
              
adaptive programming will lead to more flexible software that is easier to
              evolve.



