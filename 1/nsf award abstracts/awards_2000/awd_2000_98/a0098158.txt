Title       : Empirical Investigations of Large-Scale Regression Testing
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : April 11,  2002     
File        : a0098158

Award Number: 0098158
Award Instr.: Continuing grant                             
Prgm Manager: Sol J. Greenspan                        
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : September 1,  2001  
Expires     : August 31,  2004     (Estimated)
Expected
Total Amt.  : $274991             (Estimated)
Investigator: Adam A. Porter aporter@cs.umd.edu  (Principal Investigator current)
Sponsor     : U of MD College Park
	      3112 Lee Building
	      College Park, MD  207425141    301/405-6269

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 
Program Ref : 9216,HPCC,
Abstract    :
              Regression testing is an important, but expensive part of modern
software
              development practices. Central hypotheses of the project are that several key
              issues have not been adequately considered in current research and that these
              issues can be exploited, singly and in
combination, to control the regression
              testing process. If true, then
successful research will lead to cheaper,
              faster, more predictable and
more effective regression testing processes,
              thereby saving a great
deal of time and money throughout the industry. 
              Consequently, the project conducts the following experiments:
   1. Compare
              different RTS techniques and to explain how features of their inputs affect
              their performance.
   2. Measure how different application policies (rules
              that trigger regression testing) affect RTS performance.
   3. Develop and
              evaluate, using the information from experiments 1 and 2, data-driven (based on
              each test case's prior performance)
techniques for prioritizing test case
              execution, for determining the
order in which changes are integrated, and for
              pruning and optimizing
the original test suites.
   4. Explore whether and
              how these techniques can be combined and what effect that has, and
   5.
              Validate these models, techniques, and heuristics in an on-line, long-term
              study of a large software system.

