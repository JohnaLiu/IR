Title       : Model Checking and Beyond
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : March 7,  2003      
File        : a0098141

Award Number: 0098141
Award Instr.: Continuing grant                             
Prgm Manager: Sol J. Greenspan                        
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : June 1,  2001       
Expires     : May 31,  2004        (Estimated)
Expected
Total Amt.  : $315000             (Estimated)
Investigator: E. Allen Emerson emerson@cs.utexas.edu  (Principal Investigator current)
Sponsor     : U of Texas Austin
	      P.O Box 7726
	      Austin, TX  787137726    512/471-6424

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 
Program Ref : 9216,HPCC,
Abstract    :
              There is a chronic need for more effective methods of designing correct and
              robust computer software as well as hardware.  A method called "Model Checking"
              has been developed, providing an algorithmic means for establishing correctness
              of nominally finite state programs. Computer manufacturers
such as IBM, Intel,
              and Motorola are finding model checking useful for verifying computer hardware
              circuits of moderate size.  However, further research is required before model
              checking can be applied successfully to large hardware designs and to software.
               Software is more difficult to construct and verify than hardware  due to its
              less uniform organization and sheer scale.  Techniques to cope with irregular
              organization based on partial order and asymmetry reduction facilitating
              application of model checking to large software systems will be
              investigated.
Other central topics of investigation include: new and improved
              basic techniques, including abstractions, algorithms, and data structures, for
              more efficient model checking; integration of model checking with other program
              design methods; 
automatic program synthesis via model checking; and the
              feasibility of extending the dichotomous (correct/incorrect) framework of
              conventional model checking using richer program robustness notions.



