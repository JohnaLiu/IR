Title       : Coping With Software Change Using Information Transparency
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : September 10,  1999 
File        : a9970985

Award Number: 9970985
Award Instr.: Standard Grant                               
Prgm Manager: Sol J. Greenspan                        
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : October 1,  1999    
Expires     : September 30,  2003  (Estimated)
Expected
Total Amt.  : $180000             (Estimated)
Investigator: William G. Griswold wgg@cs.ucsd.edu  (Principal Investigator current)
Sponsor     : U of Cal San Diego
	      9500 Gilman Drive, Dept. 0934
	      La Jolla, CA  920930934    858/534-0246

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
Program Ref : 9216,HPCC,
Abstract    :
              9970985   Griswold, William, G.   University of California, San Diego
Coping
              with Software Change Using Information Transparency

Software engineers
              attempt to design software so that it can be extended, replaced, or modified in
              small units called modules.  Shortcomings of traditional modularity mechanisms
              often result in non-localized ``aspects'' requiring global change.  Engineers
              often overcome this problem in modular design by using the textual or syntactic
              similarity of the code to be modified to  economically search for and display
              the dispersed elements.  A design that facilitates such identification is
              called ``information transparent''.  This research develops a theoretical and
              practical understanding of information transparency to increase its power and
              applicability.  In particular, an in-depth analysis of a large, modern system
              is elucidating how programmers currently maintain their complex, interwoven
              structures.  The research is also developing tools that are ``aspect aware'',
              enabling programmers to treat dispersed aspects more like traditional module
              structures.  Lastly, experiments are being conducted on these tools in the
              development and maintenance of a complex system.  Together these provide
              foundations, techniques, and tools for the improved management of complex
              software system structures.  The research is also providing research training
              for several graduate students, disseminating practical results to undergraduate
              and graduate students in classes, and disseminating the tools via the
              Internet.

