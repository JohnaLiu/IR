Title       : Static Analysis Based on Model Checking
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : August 20,  1999    
File        : a9970679

Award Number: 9970679
Award Instr.: Standard Grant                               
Prgm Manager:                                         
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : September 1,  1999  
Expires     : August 31,  2002     (Estimated)
Expected
Total Amt.  : $105000             (Estimated)
Investigator: David A. Schmidt schmidt@cis.ksu.edu  (Principal Investigator current)
Sponsor     : Kansas State University
	      2 Fairchild Hall
	      Manhattan, KS  665061103    913/532-6222

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
Program Ref : 9216,HPCC,
Abstract    :
              9970679  Schmidt, David A.  Kansas State University
Static Analysis Based on
              Model Checking

This project aims toward integrating techniques based on
              temporal logic, program control-flow analysis, and data-flow analysis and
              applying the results to validating correctness and security properties of
              object-based and function-based programs. The work will proceed in two stages. 
              First, the connection between program data-flow analysis and model checking of
              program models, uncovered by Steffen, will be developed and strengthened so
              that model checking can be used as the tool of choice by compiler writers for
              mechanical analysis of programs.  In particular, the temporal logics used by
              model checkers will be adapted into specification languages for coding
              data-flow analyses and elementary security properties.  Second, the variant of
              program control-flow analysis known as ``k-CFA'' will be developed into a
              graphical formulation that can simply generate checkable models from
              higher-order object-based and functional programs.  (In the usual case, such
              programs do not have models that can be mechanically checked.)   Results from
              the research will impact the techniques that compiler writers and software
              engineers use to analyze programs and validate the programs' correctness and
              security.

