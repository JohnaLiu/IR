Title       : Hidden Algebra and Modular Distributed Concurrent Software
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : May 4,  2000        
File        : a9901002

Award Number: 9901002
Award Instr.: Continuing grant                             
Prgm Manager:                                         
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : September 15,  1999 
Expires     : August 31,  2002     (Estimated)
Expected
Total Amt.  : $231217             (Estimated)
Investigator: Joseph A. Goguen goguen@cs.ucsd.edu  (Principal Investigator current)
Sponsor     : U of Cal San Diego
	      9500 Gilman Drive, Dept. 0934
	      La Jolla, CA  920930934    858/534-0246

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
Program Ref : 9216,HPCC,
Abstract    :
              9901002  Goguen, Joseph A   University of California
Hidden Algebra and Modular
              Distributed Concurrent Software

Tools, theory, case studies, and methods are
              being developed for hidden algebra, a new approach to specifying, prototyping,
              verifying, documenting and generating distributed concurrent software.  Tools
              build on the Kumo proof assistant and website generator, by providing a new
              specification language, taking advantage of new web technology (XML, dynamic
              HTML, JavaCC, etc.), and using multiple inference engines, including the new
              CafeOBJ system.  Hidden algebra extends the algebraic approach to abstract data
              types (ADTs) initiated by the PI, by encompassing state, behavioral
              abstraction, nondeterminism, concurrency, and first order sentences; like the
              algebraic theory of ADTs, it works well with modularization.  More powerful
              proof principles are being developed, as well as better methods for documenting
              proofs.  Long term goals are to develop tools, methods and theory for high
              quality software systems, and to advance our understanding of modular
              distributed concurrent systems.  Semantics is important as a model for
              designing software tools, and providing correctness criteria for important
              relations like refinement, while experimentation is essential for ensuring that
              the approach can handle realistic problems and meet real needs.

