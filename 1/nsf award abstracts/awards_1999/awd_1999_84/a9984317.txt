Title       : CAREER: Runtime Recommender Systems for Compositional Modeling of Scientific
               Computations
Type        : Award
NSF Org     : ACI 
Latest
Amendment
Date        : August 10,  2000    
File        : a9984317

Award Number: 9984317
Award Instr.: Standard Grant                               
Prgm Manager: Frederica Darema                        
	      ACI  DIV OF ADVANCED COMPUT INFRA & RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : August 15,  2000    
Expires     : July 31,  2004       (Estimated)
Expected
Total Amt.  : $229819             (Estimated)
Investigator: Naren Ramakrishnan naren@cs.vt.edu  (Principal Investigator current)
Sponsor     : VA Polytechnic Inst & St U
	      301 Burruss Hall
	      Blacksburg, VA  240610249    540/231-6000

NSF Program : 2884      NEXT GENERATION SOFTWARE PROGR
Fld Applictn: 0000099   Other Applications NEC                  
Program Ref : 2884,9218,HPCC,
Abstract    :
              ABSTRACT

EIA 9984317
Naren Ramakrishnan
Virginia Polytechnic Institute &
              State University

CAREER:  Runtime Recommender Systems for Compositional
              Modeling of Scientific Computations

The central goal of this career
              development proposal is to introduce runtime recommendation, an abstraction
              that extends the above two ideas significantly.  Specifically, it monitors a
              computational process, detects state-changes, and makes selections of solution
              components dynamically, thus aiding knowledge-based application composition at
              runtime.  Such a facility is important in many problem domains because: (i) the
              nature of the problem being solved changes as the computations are being
              performed,  (ii) the underlying computing platform or resource availability is
              dynamic, or (iii) information about application performance characteristics is
              acquired during the actual computation rather than before.  While traditional
              recommenders are designed off-line (by organizing a battery of benchmark
              problems and algorithm executions, and subsequently mining it to obtain
              high-level recommendation rules), the design of a runtime recommender system is
              difficult, because such a database is not readily available and needs to be
              "captured" on the fly.  Thus, a runtime recommender interacts dynamically with
              its environment and learns through interactions with its environment.

