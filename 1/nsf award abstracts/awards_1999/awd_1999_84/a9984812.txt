Title       : CAREER: Type-Driven Language Technology for Software and Information
               Infrastructure
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : April 3,  2003      
File        : a9984812

Award Number: 9984812
Award Instr.: Continuing grant                             
Prgm Manager: Sol J. Greenspan                        
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : June 1,  2000       
Expires     : May 31,  2004        (Estimated)
Expected
Total Amt.  : $220000             (Estimated)
Investigator: Karl Crary crary@cs.cmu.edu  (Principal Investigator current)
Sponsor     : Carnegie Mellon University
	      5000 Forbes Avenue
	      Pittsburgh, PA  152133815    412/268-5835

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
Program Ref : 1045,9216,HPCC,
Abstract    :
              CCR-9984812
CAREER: Type-Driven Language Technology for Software
              and
Information Infrastructure

Karl Crary

The research seeks to address
              challenges faced in developing, maintaining and deploying modern software
              systems by exploiting type theory along three avenues:  programming language
              design, language-based security mechanisms, and typed compilation.  The
              language design research focuses on support for large-scale programming,
              particularly module systems, for breaking up software projects into manageable
              pieces, and type systems capable of specifying and enforcing complex program
              invariants.  The security research focuses on systems for checking and
              certifying the safety of untrusted mobile code.  In particular, it investigates
              the extension of these systems both to support tighter security policies
              (including bounds on resource usage) and to loosen their restrictions on
              aspects of code not affecting safety.  The typed compilation research seeks to
              advance the technology of compilers that preserve and exploit type information
              from source code to executables; this is the enabling technology for each of
              the other two avenues, providing high-performance compilation of advanced
              languages, and certification of the resulting executables for safety.  The
              educational program also seeks to address these same challenges by
              familiarizing undergraduate students with basic formal skills for structuring
              and reasoning about programs, and graduate students with type-theoretic
              language design and compilation.
