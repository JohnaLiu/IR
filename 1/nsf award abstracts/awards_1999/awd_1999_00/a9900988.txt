Title       : Component Data-Flow Analysis for Large-Software Systems
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : August 11,  2000    
File        : a9900988

Award Number: 9900988
Award Instr.: Standard Grant                               
Prgm Manager: Sol J. Greenspan                        
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : July 1,  1999       
Expires     : June 30,  2003       (Estimated)
Expected
Total Amt.  : $301001             (Estimated)
Investigator: Barbara G. Ryder ryder@cs.rutgers.edu  (Principal Investigator current)
Sponsor     : Rutgers Univ New Brunswick
	      ASB III, 3 Rutgers Plaza
	      New Brunswick, NJ  08901    732/932-0150

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
Program Ref : 9216,HPCC,
Abstract    :
              9900988  Barbara Ryder
Large industrial-sized software systems (of 1 million
              lines of code) suffer from a lack of adequate testing and program understanding
              tools, especially when such systems contain heterogeneous components and/or
              legacy codes. Scalable compile-time analysis techniques are needed to serve as
              a basis for appropriate software tools which can provide adjustable levels of
              precision for predictable cost.  Analysis results should be obtainable for an
              arbitrary component (e.g., module) of a system, even if the code for the entire
              system is not available for inspection.  The goal of this research is to
              explore new analyses applicable to these large industrial systems, emphasizing
              the issues of scalability and unavailability of full system source code.  This
              will be accomplished by design of a schema for "component data-flow analysis",
              a scalable data-flow technique which, given some coarse-grained data-flow
              information about unavailable program components, is able to apply an
              acceptably precise data-flow analysis on a particular component whose source
              code is available.  The utility of component analysis will be demonstrated by
              its application to several data-flow problems useful for testing and program
              understanding, using a prototype implementation built with the PROLANGS
              Analysis Framework (PAF), a publically available software platform for
              compile-time program analysis

