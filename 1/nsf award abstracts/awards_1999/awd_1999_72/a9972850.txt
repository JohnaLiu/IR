Title       : Helping Beginning Programmers View Their Programs Abstractly
Type        : Award
NSF Org     : DUE 
Latest
Amendment
Date        : May 19,  1999       
File        : a9972850

Award Number: 9972850
Award Instr.: Standard Grant                               
Prgm Manager: Andrew P. Bernat                        
	      DUE  DIVISION OF UNDERGRADUATE EDUCATION     
	      EHR  DIRECT FOR EDUCATION AND HUMAN RESOURCES
Start Date  : June 15,  1999      
Expires     : May 31,  2000        (Estimated)
Expected
Total Amt.  : $75000              (Estimated)
Investigator: Joseph L. Zachary zachary@cs.utah.edu  (Principal Investigator current)
Sponsor     : University of Utah
	      1471 Federal Way
	      Salt Lake City, UT  84102    801/581-7200

NSF Program : 7427      CCLI-EDUCATIONAL MATERIALS DEV
Fld Applictn: 0000099   Other Applications NEC                  
Program Ref : 7427,9178,SMET,
Abstract    :
              The ability to think abstractly about the components of a computer program is
              critical for computer science students.  Students who have not developed this
              ability tend to view a program as an unstructured collection of statements and
              expressions.  This project provides the opportunity for computer students to
              think abstractly about components of a computer program as functions in terms
              of what they do and classes in terms of what they represent.  The purpose of
              this activity is to enable students to cope with the complexity of large
              programs. To accomplish this goal a set of debugging and analysis tools are
              being  developed to visualize and validate programs.  

A prototype
              preprocessor and debugger for simple Java programs is being developed and
              tested by first year computer science students.     By using these new tools,
              students are expected to develop superior programming skills early in their
              academic studies.  The following activities are possible for students:  1) to
              be able to include pre conditions and post conditions for functions as comments
              in Java code;  2) to be able to represent invariants and abstraction for
              classes as comments in Java code;  3) to have the pre and post conditions of
              functions checked automatically by the debugger; 4) to have the invariant
              representation of a class checked automatically by the debugger; 5) to view
              objects abstractly throughout the debugging process; and 6) to use abstract
              notation to create objects for test cases during debugging.

Conditional upon
              a successful proof-of-concept evaluation using the tools with students, the PI
              intends to develop a national dissemination plan.  

