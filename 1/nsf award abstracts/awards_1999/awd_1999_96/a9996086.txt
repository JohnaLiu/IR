Title       : Specification Formalism for Component-Based Concurrent Systems
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : December 15,  1998  
File        : a9996086

Award Number: 9996086
Award Instr.: Standard Grant                               
Prgm Manager: Frank D. Anger                          
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : September 1,  1998  
Expires     : June 30,  2000       (Estimated)
Expected
Total Amt.  : $148000             (Estimated)
Investigator: W. Rance Cleaveland rance@cs.sunysb.edu  (Principal Investigator current)
Sponsor     : SUNY Stony Brook
	      
	      Stony Brook, NY  117943362    631/632-9949

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 
Program Ref : 9216,HPCC,
Abstract    :
              9804091  This project focuses on the development of effective  specification
              formalisms for component-oriented, or open,  concurrent systems. The specific
              topics addressed include: the  investigation of implicit specifications for
              open systems; and  the development of efficient yet generic model-checking 
              techniques for temporal logics, including those for open systems.  Implicit
              specifications take form of contexts, or system  descriptions with "holes,"
              into which the component being  developed is to be inserted. The motivation for
              such  specifications is practical: they may be written using the same  notation
              in which the system description is given and do not  require users to learn
              additional logical notations. This project  investigates the expressiveness of,
              and case studies involving,  such specifications. Model checkers permit the 
              automatic determination of when systems enjoy properties in  temporal logics.
              The results of this part of the project will  show how generic yet efficient
              model-checking procedures that  work for all temporal logics may be given; this
              will improve on  the existing state of the art, which requires new procedures 
              for each new logic. The project as a whole will yield results  leading to
              improved automated methodologies, and hence better  analysis tools, for
              specifying and reasoning about component-  oriented concurrent software.***
