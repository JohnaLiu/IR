Title       : Proof Automation in Constructive Type Theory
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : March 18,  2003     
File        : a0204193

Award Number: 0204193
Award Instr.: Continuing grant                             
Prgm Manager: John Staudhammer                        
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : July 1,  2002       
Expires     : June 30,  2005       (Estimated)
Expected
Total Amt.  : $285000             (Estimated)
Investigator: Christoph Kreitz kreitz@cs.cornell.edu  (Principal Investigator current)
Sponsor     : Cornell University-Endowed
	      Office of Sponsored Programs
	      Ithaca, NY  148532801    607/255-5014

NSF Program : 2865      GRAPH & SYMB & GEO COMPUTATION
Fld Applictn: 
Program Ref : 9216,HPCC,
Abstract    :
              ABSTRACT
0204193
Kreitz, Christoph
Cornell U 

Interactively guided proof
              assistants have been successfully used in the formal design, verification,
and
              optimization of software and hardware systems. Because of their expressive
              logics, they are
more generally applicable than fully automated tools, yet at
              a much lesser degree of automation.
The main goal of this project is to
              combine the expressive power of proof assistants with the
automatic reasoning
              capabilities of proof search procedures, proof planners, decision
              procedures,
model checkers, etc. and to use the enhanced system in the formal
              design of reliable software.
In particular we aim at providing proof
              automation for the Nuprl proof development system,
a tactical proof
              environment that has been used in numerous applications. It offers a proven
              basis
for solving mathematical problems and for designing reliable hardware
              and software systems. The
newest release of Nuprl features one of the most
              exible architectures for interacting with external
problem solving devices.
              Our experience with connecting Nuprl with JProver, a theorem prover
for
              first-order intuitionistic logic, has shown that Nuprl supports
              interoperability between formalsystems in a way that makes our goal feasible.
