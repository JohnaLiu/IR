Title       : Managing Evolution in Distributed, Heterogeneous Systems
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : July 30,  2002      
File        : a0204348

Award Number: 0204348
Award Instr.: Standard Grant                               
Prgm Manager: Sol J. Greenspan                        
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : September 1,  2002  
Expires     : August 31,  2004     (Estimated)
Expected
Total Amt.  : $150046             (Estimated)
Investigator: Premkumar T. Devanbu devanbu@cs.ucdavis.edu  (Principal Investigator current)
Sponsor     : U of Cal Davis
	      OVCR/Sponsored Programs
	      Davis, CA  956168671    530/752-2075

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 
Program Ref : 9216,HPCC,
Abstract    :
              Distributed, heterogeneous (DH) software systems are critical for
the operation
              of  modern, globalized organizations. 
Like all software, DH systems come
              under evolutionary
pressure as organizational needs evolve.  Adapting DH
              systems to meet 
changing needs in areas such as security is
              challenging:
Co-ordinated changes,  made in different languages, and on
              different
platforms must still preserve type-safety, and must not
              increase
complexity and/or complicate maintenance. 
This project investigates
              
enhancements to standards-based  middleware (e.g., CORBA) 
to support 
              evolution.
We preserve and enhance the  core IDL-based heterogeneous
              
philosophy of middleware. First, 
interface-description language
              (IDL),
used  to model the architecture-level interfaces of 
components, is
              enhanced to support
modeling of the evolutionary changes made to a DH systems.
              Location
of changes, types and life-times of new information 
to be created
              are  all explicitly modeled in an 
aspect-oriented style at the IDL level.  
              
Code generation supports
a wide range of implementation choices to
realize
              these architectural change-models. All implementations
are fully
              inter-operable.  Finally, change-models
and implementations can be
              "compononentized", 
packaged up and added to existing systems. Like this
              research,
our educational plans also span
several topics areas, including
              functional programming,
object-orientation, and architecture. We 
develop
              practically-grounded pedagogy on software evolution,
comparing the varying
              approaches to separation of concerns in
object-orientation, higher-order
              polymorphism (including
monadic programming), connectors, and aspects.
              





