Title       : ITR: Building Practical Compilers Based on Adaptive Search
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : July 24,  2002      
File        : a0205303

Award Number: 0205303
Award Instr.: Continuing grant                             
Prgm Manager: Yuan-Chieh Chow                         
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : October 1,  2002    
Expires     : July 31,  2007       (Estimated)
Expected
Total Amt.  : $1600000            (Estimated)
Investigator: Keith D. Cooper keith@rice.edu  (Principal Investigator current)
              Linda Torczon  (Co-Principal Investigator current)
              Devika Subramanian  (Co-Principal Investigator current)
Sponsor     : William Marsh Rice Univ
	      6100 Main Street, MS-16
	      Houston, TX  772511892    713/348-4820

NSF Program : 1687      ITR MEDIUM (GROUP) GRANTS
Fld Applictn: 
Program Ref : 1658,9215,HPCC,
Abstract    :
              The information age is built on software.  Web browsers and servers, office
              productivity tools, anti-lock brake systems, cellular telephones, and online
              trading systems are all implemented in software.  Most of that code is prepared
              for execution using a compiler.

For four decades, compilers have applied a
              fixed sequence of transformations to the code.  The fact that different
              transformations, applied in different orders, can produce different results has
              been known, but the techniques for picking effective transformation sequences
              have not. The computational power available with modern processors makes it
              possible to experimentally discover good transformation orders.

This project
              will systematically explore the problems of choosing transformation sequences.
              This five-year program will develop practical techniques for building adaptive
              compilers - compilers that change their behavior in response to the input
              program and the end-user's stated goals for optimization. This will require
              experimentation, algorithm development, application of techniques from machine
              learning, and basic software engineering. 

This project will produce the
              tools, techniques, and insights needed to make adaptive compilation both
              practical and productive. The resulting compilers will give users greater
              control over the run-time characteristics of their programs and will reduce the
              performance variability that plagues compiled code today.


