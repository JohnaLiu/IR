Title       : NGS: Efficient, Adaptable Software via Staged Compilation
Type        : Award
NSF Org     : ACI 
Latest
Amendment
Date        : September 20,  2002 
File        : a0203908

Award Number: 0203908
Award Instr.: Continuing grant                             
Prgm Manager: Frederica Darema                        
	      ACI  DIV OF ADVANCED COMPUT INFRA & RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : October 1,  2002    
Expires     : September 30,  2005  (Estimated)
Expected
Total Amt.  : $499937             (Estimated)
Investigator: Craig D. Chambers chambers@cs.washington.edu  (Principal Investigator current)
              Susan J. Eggers  (Co-Principal Investigator current)
Sponsor     : U of Washington
	      3935 University Way NE
	      Seattle, WA  981056613    206/543-4043

NSF Program : 2884      NEXT GENERATION SOFTWARE PROGR
Fld Applictn: 0000099   Other Applications NEC                  
Program Ref : 9218,HPCC,
Abstract    :
              EIA-0203908 Craig D. Chambers University of Washington Efficient, Adaptable
              Software via Staged Compilation

A common strategy for supporting adaptable
              software is to use a just-in-time run-time compilation model, as in Java. 
              However, this approach sacrifices performance, since any run-time optimizations
              must be quick and therefore simple to avoid slowing the program, with excessive
              compilation overhead.  To achieve high performance, particularly for highly
              modular software, a whole-program static compiler can be used.  But this
              strategy sacrifices run-time extension and adaptability, and forgoes the usual
              benefits of separate compilation as well.

This research is investigating a
              more flexible approach, staged compilation, that strives to combine the high
              performance advantages of static compilation with the flexibility advantages of
              dynamic compilation.  In the staged compilation model, each part of a program
              passes through multiple compiler stages on its journey from source code to
              optimized machine code, including stages at separate compilation time, library
              link time, complete-program link time, and run-time

