Title       : Verifying Properties of Systems Software
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : September 23,  2002 
File        : a0234689

Award Number: 0234689
Award Instr.: Continuing grant                             
Prgm Manager: Frank D. Anger                          
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : October 1,  2002    
Expires     : August 31,  2006     (Estimated)
Expected
Total Amt.  : $399933             (Estimated)
Investigator: Alexander Aiken aiken@cs.berkeley.edu  (Principal Investigator current)
              George C. Necula  (Co-Principal Investigator current)
Sponsor     : U of Cal Berkeley
	      
	      Berkeley, CA  94720    415/642-6000

NSF Program : 7214      HIGHLY DEPENDABLE COMPUTING
Fld Applictn: 
Program Ref : 9216,HPCC,
Abstract    :
              ABSTRACT
Proposal Number 0234689
TITLE           Verifying Properties of
              Systems Software
PI              Alex Aiken

This research focuses on
              enforcing critical properties in software such as device drivers,
              high-performance servers, network protocols, and embedded systems.  The plan is
              to design, build and experiment with an analysis tool for C and C++ programs
              that will achieve two goals:

(1) It will check the full range of critical
              properties of systems software, from low-level checks, such as preventing
              buffer overruns and null pointer dereferences, to high-level,
              program-specific
checks, such as verifying the steps of a protocol are
              executed in the correct order.

(2) The tool will be used for investigating
              the trade-offs between static (at compile-time) and dynamic (at run-time)
              enforcement of properties.

The impacts of this work should include: first, a
              better understanding of when it is sufficient to use the weaker but less
              expensive (in programmer effort) checking at runtime instead of static checking
              at compile-time; a coherent model of how to integrate very low-level and
              high-level program checking in a single system; and a prototype tool that
              others without specialized knowledge of program analysis can use to improve the
              quality of complex systems written in C and C++.


