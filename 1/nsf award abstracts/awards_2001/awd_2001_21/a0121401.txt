Title       : ITR/SY: A New Framework For Program Optimization
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : November 15,  2002  
File        : a0121401

Award Number: 0121401
Award Instr.: Standard Grant                               
Prgm Manager: Yuan-Chieh Chow                         
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : October 1,  2001    
Expires     : September 30,  2004  (Estimated)
Expected
Total Amt.  : $1800000            (Estimated)
Investigator: David A. Padua padua@uiuc.edu  (Principal Investigator current)
              Gerald F. DeJong  (Co-Principal Investigator current)
              Keshav Pingali  (Co-Principal Investigator current)
Sponsor     : U of Ill Urbana-Champaign
	      801 South Wright Street
	      Champaign, IL  61820    217/333-2186

NSF Program : 1687      ITR MEDIUM (GROUP) GRANTS
Fld Applictn: 
Program Ref : 0000,1658,OTHR,
Abstract    :
              The objective of this project is to develop a methodology to design the
              optimization component of a compiler that learns from experience.  The strategy
              to be studied involves the use of an explanation-based learning (EBL)
              sub-system that, based on analytical and empirical information, will generate
              policies to control the optimization component of the compiler. The analytical
              information will relate program characteristics to performance. The empirical
              information will be obtained by profiling the program and will be stored in a
              database containing information from earlier versions of the program and from
              other programs in the same problem domain.
An experimental compiler will be
              implemented to evaluate the methodolog,. The core of the compiler will be a
              translator controlled by parameters that could be selected from a standard
              collection, in which case the compiler will behave like a conventional
              compiler, or be generated by the machine learning sub-system.
Specific topics
              to be studied as part of this project include: compiler organization, program
              transformations and their interaction, performance prediction based on both
              static and dynamic information, machine learning techniques and the integration
              of both prior knowledge (performance abstractions in our case) and empirical
              data, and context-adaptive computing systems.

