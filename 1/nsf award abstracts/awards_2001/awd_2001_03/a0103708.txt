Title       : NGS: Performance Mining of Large-Scale Data-Intensive Distributed Object
               Applications
Type        : Award
NSF Org     : ACI 
Latest
Amendment
Date        : March 31,  2003     
File        : a0103708

Award Number: 0103708
Award Instr.: Continuing grant                             
Prgm Manager: Gary W Strong                           
	      ACI  DIV OF ADVANCED COMPUT INFRA & RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : September 15,  2001 
Expires     : August 31,  2004     (Estimated)
Expected
Total Amt.  : $409521             (Estimated)
Investigator: Mohammed J. Zaki zaki@cs.rpi.edu  (Principal Investigator current)
              Boleslaw K. Szymanski  (Co-Principal Investigator current)
              Christopher Carothers  (Co-Principal Investigator current)
Sponsor     : Rensselaer Polytech Inst
	      110 8th Street
	      Troy, NY  121803522    518/276-6000

NSF Program : 2884      NEXT GENERATION SOFTWARE PROGR
Fld Applictn: 0000099   Other Applications NEC                  
Program Ref : 9218,HPCC,
Abstract    :
              EIA-0103708
Mohammed J. Zaki
Rensselaer Polytechnic Institute

NGS
              Performance Mining of large-scale Data-Intensive Distributed Object
              Applications

The objective of the proposal is to develop a performance
              measurements-based run-time environment for supporting large data-intensive
              distributed object applications.  The system will provide continuous and
              adaptive performance optimization via a combination of performance data mining,
              critical path discovery and speculative execution.

To address these
              challenges for next generation software systems we propose to develop the
              PERFMINER engine for the performance mining.  PERFMINER, a system for
              continuous performance optimization via mining, will enable a distributed
              object system to: 1) discover its own critical path, 2) detect new
              opportunities for speculative processing, and 3) to facilitate modifying an
              object's behaviors (i.e., methods) at run-time in response to newly acquired
              knowledge.

