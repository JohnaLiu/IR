Title       : SGER: Using NLP tools for Requirements Visualization
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : August 2,  2001     
File        : a0101833

Award Number: 0101833
Award Instr.: Standard Grant                               
Prgm Manager: Sol J. Greenspan                        
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : September 1,  2001  
Expires     : August 31,  2003     (Estimated)
Expected
Total Amt.  : $81807              (Estimated)
Investigator: Rym Mili rmili@utdallas.edu  (Principal Investigator current)
Sponsor     : U of Texas Dallas
	      P O Box 830688
	      Richardson, TX  750830688    972/883-2313

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 
Program Ref : 9216,9237,HPCC,
Abstract    :
              CCR-0101833
Mili
Univ of Texas - Dallas
SGER: Using NLP Tools for
              Requirements Visualization

ABSTRACT

Creating, understanding, and
              formalizing requirements are major hurdles in system development.  Inherent
              ambiguity in natural language makes requirements documents difficult to
              interpret and maintain, while formal specification methods are unacceptable to
              many stakeholders.  This project intends to demonstrate the feasibility of
              using natural language processing (NLP) tools to analyze informal descriptions
              of software requirements for the purpose of generating semi-formal and formal
              descriptions, analyzing them, and automatically maintaining interdependencies
              between textual, graphical, and formal representations. The chosen NLP tool is
              the Ergo parser of Bralich and Bickerton, one that is capable of full analysis
              of English grammar and syntax and of engaging in question/answer and
              statement/response repartee in real time.  The project explores a variety of
              grammatical and writing styles to establish guidelines for useful documents;
              analyzes synonymous English styles to establish dependency grids; and creates
              and integrates interfaces with other program functions.

